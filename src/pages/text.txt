“Get ready to transform your ideas into reality with cutting-edge AI validation at your fingertips.”


Login Page:

"Unlock the AI-powered future of your startup."
"Ready to transform your idea into reality? Login now."
"Your path to innovation starts here. Login to validate your idea."
Signup Page:

"Join the community of founders turning ideas into success."
"Create your account and let AI guide your startup journey."
"Start validating your idea today. Sign up now and be part of the innovation wave."




Color-CODE:
red-bold: #dd183b
red-light: #fff0eb


        // const exp = decodedToken.exp;  
        // const now = Date.now() / 1000;
        // const timeout = exp - decodedToken.iat;

        // console.log(timeout)


        // setTimeout(() => {
        //     refreshToken();
        // }, timeout);


 Welcom {LoggedinUser ? LoggedinUser : "Anonymous User"}
 <br />
 
 
 
 {LoggedinUser && <button className=" bg-red-400"  onClick={userLogout}> LogOut</button>}









 /* The `useEffect` hook in the provided code snippet is responsible for setting up a timer to refresh
the user's authentication token. Here's a breakdown of what the `useEffect` block is doing: */
    useEffect(() => {
        // The renewAuthToken should not run on the initial render. Instead it should run when the authDataObject state changes, hence we have it as a dependency.
        if(hasMounted.current){
            // Set the refresh token timer when authDataObject state changes
            renewAuthToken(authDataObject);
        }
        else{
            hasMounted.current = true;
        }
    }, [authDataObject]);



    /**
 * The `renewAuthToken` function checks if a token is valid, calculates the time difference until
 * expiration minus 1 minute, and schedules a refresh one minute before the token expires.
 * @returns The `renewAuthToken` function does not have a return statement, so it does not explicitly
 * return any value. It is a function that sets a timeout to call the `refreshToken` function one
 * minute before the token expires.
 */
    // const renewAuthToken = (token) => {

    //     // this function gets the token from the state holding it(which it gets from local storage on initial render), this function checks if the token is valid. If valid, get the Accesstoken, decode it, get the exp value, check the difference between the current time and the expiration time, minus 60(1 minute) from it and set this value as the settimeout time. Basicall run the function one minute before the token expires.

    //     if (!token)return;
    
    //     const decodedToken = jwtDecode(token.access);
    //     const currentTime = Math.floor(Date.now() / 1000);
    //     let timeStampMinutes = (decodedToken.exp - currentTime - 60) * 1000

    //     setTimeout(() => {
    //         refreshToken();
    //     }, timeStampMinutes);


    // };


        useEffect( () => {
        // if (isFirstRender.current) {
        //     // First render, run only the first function
        //     confirmTokenValidity()
            
        //     isFirstRender.current = false;
        //   }
        
        //   
        if (LoggedinUser && tokenValidity){
            getPreviousValidatedIdeas()
        }
        
    }, [validatedIdeaResponse, tokenValidity])











            // if (authDataObject) {
        //     const decodedAccessToken = jwtDecode(authDataObject.access);
        //     const currentTime = Math.floor(Date.now() / 1000);
        //     const timeUntilExpiration = decodedAccessToken.exp - currentTime;
      
        //     // Set a timeout to refresh the token 1 minute before expiration
        //     if (timeUntilExpiration > 60) {
        //       const timeoutId = setTimeout(() => {
        //         console.log("refresh before expire")
        //         refreshToken();
        //       }, (timeUntilExpiration - 60) * 1000); // Convert seconds to milliseconds
      
        //       // Clean up the timeout when the component unmounts or authDataObject changes
        //       return () => clearTimeout(timeoutId);
        //     }
        // }




        
        const confirmTokenValidity = async (data) => {
            if (data !== null){
                const decodedRefreshToken = jwtDecode(data.refresh);
                const decodedAccessToken = jwtDecode(data.access);
                const currentTime = Math.floor(Date.now() / 1000);
                const buffer = 60
                
                //  Checking if the refresh token as expired when the page loads
                if (currentTime > decodedRefreshToken.exp){
                  // reset everything since this user is no longer authenticated (refresh token has expired)
                  handleAuthFailure()
                }
                
                else if(currentTime > decodedAccessToken.exp - buffer){
                    await refreshToken();
                    setAccessTokenCheck(true)
                }
            }
        }

        confirmTokenValidity(authDataObject);